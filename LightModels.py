# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Models
                                 A QGIS plugin
 LightModels
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-07-25
        git sha              : $Format:%H$
        copyright            : (C) 2023 by LightModels
        email                : dvornikov_alesha@mail.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
# Initialize Qt resources from file resources.py
from .resources import *  
# Import the code for the DockWidget
from .LightModels_dockwidget import ModelsDockWidget 
import os.path
from qgis.core import QgsProject
from PyQt5 import QtCore, QtGui, QtWidgets
from qgis.core import *
from qgis.utils import iface

import math
from abc import ABC, abstractmethod


class IMathModel(ABC):
    @abstractmethod
    def get_result(self):
        pass
    @abstractmethod
    def get_model_name():
        pass
    pass
    
class ClassicalGravitationModel (IMathModel):

    def __init__(self):
        self.proport_coefficient = 0
        self.m1 = 0
        self.m2 = 0
        self.city_distance = 0

    def get_result(self) -> float:
        return self.proport_coefficient * self.m1 * self.m2 / (math.pow(self.city_distance, 2))
    
    def get_model_name():
        return "Классическая гравитационная модель"
    
class FonTunenModel (IMathModel):

    def __init__(self):
        self.products = []

    def add_product(self, profit_constant, delivery_rate, name):
        self.products.append({
            'profit_constant': profit_constant,
            'delivery_rate': delivery_rate,
            'name': name
        })

    def products_sort(self, products) -> None:
        # result_products = [i for i in products]

        for i in range(len(products)):
            for j in range(len(products) - 1):
                if (products[j]['profit_constant'] < products[j + 1]['profit_constant']):
                    temp = products[j]
                    products[j] = products[j + 1]
                    products[j + 1] = temp

        # return result_products

    def get_result(self) -> list:
        tmpProducts = [i for i in self.products]
        self.products_sort(tmpProducts)

        result = []

        for i in range(len(tmpProducts)):
            radius = tmpProducts[i]['profit_constant'] / \
                tmpProducts[i]['delivery_rate']
            change_dot = 0

            if i == 0:
                change_dot = 0
            else:
                change_dot = (tmpProducts[i-1]['profit_constant'] - tmpProducts[i]['profit_constant']) / (
                    tmpProducts[i-1]['delivery_rate'] - tmpProducts[i]['delivery_rate'])

            result.append({
                'radius': radius,
                'change_dot': change_dot,
                'name': tmpProducts[i]['name']
            })
        
        return result
    
    def get_model_name():
        return "модель изолированного государства (модель фон Тюнена)"
    
    def print_results(self, result_products):
        for i in result_products:
            print(f"Название: {i['name']}")
            print(f"Радиус: {i['radius']}")
            print(f"Change Dot: {i['change_dot']}")
            print('')
            
class Models:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Models_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&LightModels')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'Models')
        self.toolbar.setObjectName(u'Models')

        #print "** INITIALIZING Models"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Models', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/LightModels/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING Models"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)
        self.dockwidget.layer_comboBox.clear()
        self.dockwidget.model_comboBox.clear()
        self.dockwidget.label_message.clear()
        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None
        for layer in iface.mapCanvas().layers():
            layer.setOpacity(1.00)
        self.pluginIsActive = False
        

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD Models"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&LightModels'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------


    def run(self):
        def tmp_part(selFeatures):
            self.dockwidget.continueStage2_button.setEnabled(True)
            self.dockwidget.label_message.setText(f'{len(selFeatures)} features were selected')
        def scnd_stage(self, current_layer, current_model):
            print(current_layer)
            self.dockwidget.stage2_button.setEnabled(False)

            stg2widget = ModelsDockWidget()
            self.dockwidget.label_message.setText("Для продолжения выберите объект слоя для наложения модели")
            self.dockwidget.label_message.setStyleSheet("color: green")
            layers = iface.mapCanvas().layers()
            for layer in layers:
                if (layer.type() == QgsMapLayer.VectorLayer and layer.name() != current_layer.name() and layer.geometryType() == QgsWkbTypes.PointGeometry): 
                    layer.setOpacity(0.25)
            current_layer.selectionChanged.connect(tmp_part())


            # self.dockwidget.continueStage2_button.setEnabled(True)
            #тут тык на конкретную features слоя и возвращение прозрачности (ниже)
            #for layer in layers:
               # if (layer.type() == QgsMapLayer.VectorLayer and layer.name() != current_layer.name() and layer.geometryType() == QgsWkbTypes.PointGeometry): 
                    #layer.setOpacity(1.00)
            
        """Run method that loads and starts the plugin"""
        if not self.pluginIsActive:
            self.pluginIsActive = True
            

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = ModelsDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)
            self.dockwidget.dockWidgetContents.setEnabled(True)
            self.dockwidget.continueStage2_button.setEnabled(False)
            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.TopDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

            layers = iface.mapCanvas().layers()
            for layer in layers:
                if (layer.type() == QgsMapLayer.VectorLayer and layer.geometryType() == QgsWkbTypes.PointGeometry): #layer.type() - тип м.б. растровым/векторным, а geometryType - тип (point/polygon) векторного типа
                    self.dockwidget.layer_comboBox.addItem(layer.name())
            for model in IMathModel.__subclasses__():
                self.dockwidget.model_comboBox.addItem(model.get_model_name())

            def stage2button():
                selected_layer = QgsProject.instance().mapLayersByName(self.dockwidget.layer_comboBox.currentText())[0] #Так нельзя, но не я такой, жизнь такая
                for model in IMathModel.__subclasses__():
                    if (self.dockwidget.model_comboBox.currentText() == model.get_model_name()):
                        selected_model = model
                scnd_stage(self, selected_layer, selected_model)

            self.dockwidget.stage2_button.clicked.connect(stage2button)


    
        

